#include<bits/stdc++.h>
using namespace std;
#define fo(i,n)		for(i=0;i<n;i++)
#define rep(i,k,n) 	for(i=k;k<n?i<n:i>n;k<n?i+=1:i-=1)
#define debarr(arr) for(int xxx = 0; xxx < arr.size(); xxx++) cout <<  arr[xxx] << ' '; cout<< endl;
#define deb(x) 		cout << #x << "=" << x << endl
#define deb2(x, y)	cout << #x << "=" << x << ", " << #y << "=" << y << endl;
#define ll	long long
#define pb	push_back
#define mp	make_pair
#define F	first
#define S	second
#define all(x)		x.begin(), x.end()
#define clr(x)		memset(x, 0, sizeof(x))
#define sz(x) (int) (x).size()
#define sortall(x)	sort(all(x))
#define tr(it, a)	for(auto it = a.begin(); it != a.end(); it++)
#define PI	3.1415926535897932384626
typedef pair<int, int>	pii;
typedef pair<ll, ll>	pl;
typedef vector<int>		vi;
typedef vector<ll>		vl;
typedef vector<pii>		vpii;
typedef vector<pl>		vpl;
typedef vector<vi>		vvi;
typedef vector<vl>		vvl;
mt19937_64 rang(chrono::high_resolution_clock::now().time_since_epoch().count());
int rng(int lim) {
    uniform_int_distribution<int> uid(0,lim-1);
    return uid(rang);
}
void setIO(string name = "") {
    if (sz(name)) {
        freopen((name + ".in").c_str(), "r", stdin); // see /general/input-output
        freopen((name + ".out").c_str(), "w", stdout);
    }
}
const int mod = 1000000007;
const int N = 1e6 + 7, M = N;
//=======================

void solve() {
    int i, j;
}

int main() {
    srand(chrono::high_resolution_clock::now().time_since_epoch().count());
    auto begin = std::chrono::high_resolution_clock::now();

    // setIO("");
    #ifndef ONLINE_JUDGE
        freopen("input.txt","r",stdin);
        freopen("output.txt","w",stdout);
        freopen("error.txt","w",stderr);
    #endif

    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int t = 1;
    cin >> t;
    while(t--) {
        solve();
    }

    auto end = std::chrono::high_resolution_clock::now();
    auto elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);
    cerr << "Time : " << elapsed.count() * 1e-6 << " ms.";
    return 0;
}
